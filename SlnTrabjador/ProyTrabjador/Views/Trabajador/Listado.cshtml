@model IEnumerable<ProyTrabjador.Models.Listar_Trabajador>

@{
    ViewData["Title"] = "Listado de Trabajadores";
}

<h1>Listado de Trabajadores</h1>
<a class="btn btn-primary mb-3" href="#" id="btnAbrirCrearModal">Nuevo Registro</a>

<div style="display: flex; justify-content: flex-end; margin-bottom: 10px;">
    <select id="sexoFiltro" class="form-select" style="width: 180px;"
        onchange="window.location.href='@Url.Action("Listado")' + (this.value ? ('?sexo=' + this.value) : '');">
        @{
            var sexoSel = Context.Request.Query["sexo"].ToString();
        }
        @if (string.IsNullOrEmpty(sexoSel))
        {
            <option value="" selected>Todos</option>
        }
        else
        {
            <option value="">Todos</option>
        }
        @if (sexoSel == "M")
        {
            <option value="M" selected>Masculino</option>
        }
        else
        {
            <option value="M">Masculino</option>
        }
        @if (sexoSel == "F")
        {
            <option value="F" selected>Femenino</option>
        }
        else
        {
            <option value="F">Femenino</option>
        }
    </select>
</div>

<style>
    .fila-femenino {
        background-color: #ffe5b4 !important; /* Naranja claro */
    }
    .fila-masculino {
        background-color: #b3d8ff !important; /* Azul claro */
    }
    .tabla-scroll {
        max-height: 400px;
        overflow-y: auto;
        display: block;
    }
    thead th {
        position: sticky;
        top: 0;
        background: #222 !important;
        color: #fff !important;
        z-index: 2;
        box-shadow: 0 2px 2px -1px #ccc;
    }
</style>

<div class="tabla-scroll">
<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.TipoDocumento)</th>
            <th>@Html.DisplayNameFor(model => model.NumeroDocumento)</th>
            <th>@Html.DisplayNameFor(model => model.Nombres)</th>
            <th>@Html.DisplayNameFor(model => model.Sexo)</th>
            <th>Departamento</th>
            <th>Provincia</th>
            <th>Distrito</th>
            <th>Acción</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        var rowClass = item.Sexo == "F" ? "fila-femenino" : item.Sexo == "M" ? "fila-masculino" : "";
        <tr class="@rowClass">
            <td>@item.TipoDocumento</td>
            <td>@item.NumeroDocumento</td>
            <td>@item.Nombres</td>
            <td>@item.Sexo</td>
            <td>@item.NombreDepartamento</td>
            <td>@item.NombreProvincia</td>
            <td>@item.NombreDistrito</td>
            <td>
                <button type="button" class="btn btn-warning me-2" onclick="abrirModalEditar(@item.Id)">Editar</button>
                <a class="btn btn-danger" href="#" data-id="@item.Id" onclick="abrirModalEliminar(@item.Id); return false;">Eliminar</a>
            </td>
        </tr>
    }
    </tbody>
</table>
</div>

<!-- Controles de paginación -->
<div style="display: flex; justify-content: center; margin-top: 20px;">
    <nav aria-label="Paginación">
        <ul class="pagination">
            @if ((int)ViewBag.PaginaActual > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Listado", new { sexo = Context.Request.Query["sexo"].ToString(), page = (int)ViewBag.PaginaActual - 1 })">Anterior</a>
                </li>
            }
            @for (int i = 1; i <= (int)ViewBag.TotalPaginas; i++)
            {
                <li class="page-item @(i == (int)ViewBag.PaginaActual ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Listado", new { sexo = Context.Request.Query["sexo"].ToString(), page = i })">@i</a>
                </li>
            }
            @if ((int)ViewBag.PaginaActual < (int)ViewBag.TotalPaginas)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Listado", new { sexo = Context.Request.Query["sexo"].ToString(), page = (int)ViewBag.PaginaActual + 1 })">Siguiente</a>
                </li>
            }
        </ul>
    </nav>
</div>

<!-- Modal de confirmación -->
<div class="modal fade" id="modalEliminar" tabindex="-1" aria-labelledby="modalEliminarLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="formEliminar" method="post">
        <div class="modal-header">
          <h5 class="modal-title" id="modalEliminarLabel">Confirmar eliminación</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          ¿Está seguro de eliminar el registro?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
          <button type="submit" class="btn btn-danger">Sí, eliminar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal de edición -->
<div class="modal fade" id="modalEditar" tabindex="-1" aria-labelledby="modalEditarLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarLabel">Editar Trabajador</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body" id="modalEditarBody">
        <!-- Aquí se cargará el formulario de edición -->
      </div>
    </div>
  </div>
</div>

<!-- Modal de creación -->
<div class="modal fade" id="modalCrear" tabindex="-1" aria-labelledby="modalCrearLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalCrearLabel">Crear Trabajador</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body" id="modalCrearBody">
        <!-- Aquí se cargará el formulario de creación -->
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        var idAEliminar = 0;
        function abrirModalEliminar(id) {
            idAEliminar = id;
            var modal = new bootstrap.Modal(document.getElementById('modalEliminar'));
            modal.show();
        }

        document.getElementById('formEliminar').addEventListener('submit', function (e) {
            e.preventDefault();
            var form = this;
            form.action = '/Trabajador/Eliminar/' + idAEliminar;
            form.method = 'post';
            form.submit();
        });

        // Modal de edición
        function abrirModalEditar(id) {
            // Cargar el formulario de edición por AJAX
            fetch('/Trabajador/EditarModal/' + id)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('modalEditarBody').innerHTML = html;
                    var modal = new bootstrap.Modal(document.getElementById('modalEditar'));
                    modal.show();

                    // Ejecutar scripts embebidos en el HTML recibido (para combos dependientes)
                    const scripts = document.getElementById('modalEditarBody').querySelectorAll('script');
                    scripts.forEach(script => {
                        eval(script.innerText);
                    });

                    // Agregar el submit AJAX al formulario de edición
                    const form = document.getElementById('formEditarTrabajador');
                    if (form) {
                        form.onsubmit = function (e) {
                            e.preventDefault();
                            const formData = new FormData(form);
                            fetch('/Trabajador/EditarModal', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => {
                                const contentType = response.headers.get('content-type');
                                if (contentType && contentType.indexOf('application/json') !== -1) {
                                    return response.json();
                                } else {
                                    return response.text();
                                }
                            })
                            .then(data => {
                                if (data.success) {
                                    // Cerrar modal y recargar
                                    var modal = bootstrap.Modal.getInstance(document.getElementById('modalEditar'));
                                    modal.hide();
                                    location.reload();
                                } else {
                                    // Si hay errores, reemplazar el contenido del modal
                                    document.getElementById('modalEditarBody').innerHTML = data;
                                    // Volver a ejecutar scripts embebidos si hay errores
                                    const scripts = document.getElementById('modalEditarBody').querySelectorAll('script');
                                    scripts.forEach(script => {
                                        eval(script.innerText);
                                    });
                                }
                            });
                        };
                    }
                });
        }

        // Modal de creación
        document.getElementById('btnAbrirCrearModal').addEventListener('click', function (e) {
            e.preventDefault();
            fetch('/Trabajador/CrearModal')
                .then(response => response.text())
                .then(html => {
                    document.getElementById('modalCrearBody').innerHTML = html;
                    var modal = new bootstrap.Modal(document.getElementById('modalCrear'));
                    modal.show();

                    // Ejecutar scripts embebidos en el HTML recibido (para combos dependientes)
                    const scripts = document.getElementById('modalCrearBody').querySelectorAll('script');
                    scripts.forEach(script => {
                        eval(script.innerText);
                    });
                });
        });
    </script>
}

<script>
    // Guardar la posición del scroll antes de recargar
    window.addEventListener("beforeunload", function () {
        localStorage.setItem("scrollPos", window.scrollY);
    });

    // Restaurar la posición del scroll al cargar
    window.addEventListener("load", function () {
        var scrollPos = localStorage.getItem("scrollPos");
        if (scrollPos) window.scrollTo(0, scrollPos);
    });
</script>
